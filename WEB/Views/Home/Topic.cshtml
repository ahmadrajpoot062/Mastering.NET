@model List<Core.Entities.Lecture>

@{
    ViewData["Title"] = ViewBag.TopicName;
    Layout = null;
}

@using Application.Services
@using Core.Entities

@inject GenericService<Topic> _topicRepository

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <title>@ViewData["Title"] - Mastering.NET</title>
    <meta name="description" content="">
    <meta name="keywords" content="">

    <!-- Favicons -->
    <link rel="apple-touch-icon" sizes="180x180" href="~/assets/img/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="~/assets/img/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="~/assets/img/favicon-16x16.png">
    <link rel="manifest" href="~/assets/img/site.webmanifest">
    <!-- Fonts -->
    <link href="https://fonts.googleapis.com" rel="preconnect">
    <link href="https://fonts.gstatic.com" rel="preconnect" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&family=Inter:wght@100;200;300;400;500;600;700;800;900&family=Nunito:ital,wght@0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap"
          rel="stylesheet">
    <!-- Vendor CSS Files -->
    <link href="~/assets/vendor/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <link href="~/assets/vendor/bootstrap-icons/bootstrap-icons.css" rel="stylesheet">
    <link href="~/assets/vendor/aos/aos.css" rel="stylesheet">
    <link href="~/assets/vendor/glightbox/css/glightbox.min.css" rel="stylesheet">
    <link href="~/assets/vendor/swiper/swiper-bundle.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

    <!-- Main CSS File -->
    <link href="~/assets/css/main.css" rel="stylesheet" />

   <style>
        
        .left-navbar {
            position: fixed;
            left: 0;
            top: 105px; /* Adjust for the height of both fixed top elements */
            width: 25%;
            height: calc(100vh - 105px); /* Adjust height to accommodate fixed elements */
            background-color: #549DB4;
            padding: 20px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            overflow-y: auto; /* Allow scrolling in the left navbar */
        }
        .navbar-title {
            font-size: 24px;
            font-weight: bolder;
            margin-bottom: 20px;
            padding-bottom: 10px;
            color: #ffffff;
            border-bottom: 2px solid #3b7d90;
        }

        .lecture-list-container {
            /* Removed height and overflow properties */
            padding-right: 10px;
            padding-bottom: 80px;
        }        
        .lecture-list {
            list-style: none;
            padding: 0;
            margin: 0;
        }        
        .lecture-item {
            margin-bottom: 15px;
        }   
        .lecture-link {
            display: flex;
            align-items: center;
            padding: 10px;
            text-decoration: none;
            background-color: #3b7d90;
            color: #ffffff;
            border-radius: 8px;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
            transition: background-color 0.3s ease;          
        }

        .lecture-link.active {
            background-color: #5aaec4; /* Change the background color */
            font-weight: bold; /* Make the text bold */
            color: #ffffff;
        }

        .lecture-title{
            overflow-wrap: break-word; /* Allows long words to break and wrap to the next line */
            word-wrap: break-word; /* Legacy support for wrapping long words */
            width: 80%; /* Ensures the link takes full width of the parent */
            box-sizing: border-box; /* Ensures padding is included in width calculation */
        }
        .lecture-link:hover {
            background-color: #5aaec4;
            color: #ffffff;
        }
        .content-area {
            margin-left: 25%; /* Make space for fixed navbar */
            padding-top: 105px; /* Adjust to ensure content starts below fixed elements */
            padding-left: 30px;
        }

        /* Toggle button for smaller screens */
        .toggle-btn {
            display: none;
        }
        @@media (max-width: 992px) {
            .toggle-btn {
                display: block;
                width: 50px;
                position: fixed;
                bottom: 28px; /* Corrected 'bottome' to 'bottom' */  
                right: 28px;
                z-index: 1001;
                font-size: 24px;
                background: none;
                border: 3px solid #549DB4;
                cursor: pointer;
                color: #549DB4;
            }

        
            .left-navbar {
                position: fixed;
                left: -100%;
                transition: 0.3s ease-in-out;
                width: 75%;
                z-index: 1000;
                height: 100%;
            }
        
            .left-navbar.active {
                left: 0;
            }
        
            .content-area {
                margin-left: 0;
            }
        }
    </style>


</head>

<body>

    <div class="fixed-top-custom">
        <header id="header" class="header d-flex align-items-center" style="height: 70px;">
            <div class="container-fluid container-xl position-relative d-flex align-items-center">
                <a href="/Home/Index" class="logo d-flex align-items-center me-auto">
                    <img src="~/assets/img/logo.png" alt="">
                    <h1 class="sitename">Mastering .NET</h1>
                </a>

                <nav id="navmenu" class="navmenu me-5">
                    <ul>
                        <li><a href="/Home/Index#hero" class="active">Home<i class="bi bi-house fs-5"></i></a></li>
                        <li><a href="/Home/Index#about">About<i class="bi bi-info-circle fs-5"></i></a></li>
                        <li><a href="/Home/Index#contact" class="me-3">Contact<i class="bi bi-telephone fs-5"></i></a></li>
                    </ul>
                    <i class="mobile-nav-toggle d-xl-none bi bi-list"></i>
                </nav>
                <partial name="_LoginPartial" />
            </div>
        </header>

        <!-- Secondary navbar for topics -->
        <div id="topic-wrapper">
            <partial name="_topicsNavBarPartial" model="await _topicRepository.GetAll()" />
        </div>
    </div>

    <div class="container-fluid">
        <div class="row">
            <!-- Toggle Button for small screens -->
            <button class="toggle-btn shadow" id="toggleNavbar">☰</button>

            <!-- Left Navbar -->
            <div class="col-3 left-navbar" id="leftNavbar">
                <h4 class="navbar-title text-white">@ViewBag.TopicName</h4>

                @if (User.Identity.Name == "admin231@gmail.com")
                {
                    <!-- Icon for adding new Lecture -->
                    <div class="d-flex justify-content-end add-lecture-wrapper">
                        <button type="button" class="btn btn-link add-lecture-icon" data-bs-toggle="modal"
                                data-bs-target="#uploadLectureModel" data-tutorial-id="@ViewBag.TopicId">
                            <i class="bi bi-plus-circle fs-3 text-white"></i>
                        </button>
                    </div>
                }

                <div id="leftNavDiv" class="lecture-list-container">
                    <partial name="_leftNavPartial" model="Model" />
                </div>
            </div>

            <!-- Main Content Section -->
           
            <div class="col-lg-9 content-area my-5">
                <div id="lecture-name" class="mb-3">

                </div>
                <div id="content-section">
                    <div class="container text-center">
                        <div class="d-flex flex-column justify-content-center align-items-center" data-aos="fade-up" data-aos-delay="200">
                            <img src="~/assets/img/hero-services-img.png" style="height:300px; width:350px;" class="img-fluid hero-img" alt="">
                            <p class="fst-italic fw-bold fs-4" style="color:#549DB4">Learn @ViewBag.TopicName with Mastering.NET </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal for uploading content -->
    <div class="modal fade" id="uploadLectureModel" tabindex="-1" aria-labelledby="uploadLectureModelLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="uploadLectureModelLabel">Upload Content</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="uploadForm" enctype="multipart/form-data">


                        <div class="mb-3 mt-3">
                            <label for="title" class="form-label">Title</label>
                            <input type="text" class="form-control" id="title" name="title" placeholder="Enter Title" required>
                        </div>

                        <div class="mb-3">
                            <label for="content" class="form-label">Content</label>
                            <textarea rows="10" class="form-control" id="content" name="content" placeholder="Enter Html Content" required></textarea>
                        </div>

                        <!-- Submit Button (Centered) -->
                        <div class="d-flex justify-content-center">
                            <button type="button" class="btn text-white w-50 mt-4" style="background-color: #559DB4;" id="addLectureButton">Upload</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>


    <!-- Confirmation Delete Lecture Modal -->
    <div class="modal fade" id="confirmDeleteModal" tabindex="-1" aria-labelledby="confirmDeleteModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="confirmDeleteModalLabel">Confirm Delete</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this item?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary w-25" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger w-25" id="confirmDeleteButton">Delete</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="confirmDeleteModal" tabindex="-1" aria-labelledby="confirmDeleteModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="confirmDeleteModalLabel">Confirm Delete</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this item?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary w-25" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger w-25" id="confirmDeleteButton">Delete</button>
                </div>
            </div>
        </div>
    </div>


    <!-- Scroll Top -->
    <a href="#" id="scroll-top" class="scroll-top d-flex align-items-center justify-content-center">
        <i class="bi bi-arrow-up-short"></i>
    </a>

    <!-- Preloader -->
    <div id="preloader"></div>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <!-- Vendor JS Files -->
    <script src="~/assets/vendor/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="~/assets/vendor/aos/aos.js"></script>
    <script src="~/assets/vendor/glightbox/js/glightbox.min.js"></script>
    <script src="~/assets/vendor/swiper/swiper-bundle.min.js"></script>

    <!-- Main JS File -->
    <script src="~/assets/js/main.js"></script>

    <script>
        // Detect content overflow and toggle arrow visibility
        function checkOverflow() {
            const container = document.getElementById('topic-container');
            const scrollLeft = document.getElementById('scroll-left');
            const scrollRight = document.getElementById('scroll-right');

            // Check if the container content overflows horizontally
            if (container.scrollWidth > container.clientWidth) {
                scrollLeft.style.display = 'flex'; // Show the left arrow if overflow occurs
                scrollRight.style.display = 'flex'; // Show the right arrow if overflow occurs
            } else {
                scrollLeft.style.display = 'none'; // Hide the left arrow if no overflow
                scrollRight.style.display = 'none'; // Hide the right arrow if no overflow
            }
        }

        // Scroll the topics when the arrows are clicked
        document.getElementById('scroll-left').addEventListener('click', function () {
            const container = document.getElementById('topic-container');
            container.scrollBy({
                left: -200, // Scroll left by 200px (adjust as needed)
                behavior: 'smooth'
            });
        });

        document.getElementById('scroll-right').addEventListener('click', function () {
            const container = document.getElementById('topic-container');
            container.scrollBy({
                left: 200, // Scroll right by 200px (adjust as needed)
                behavior: 'smooth'
            });
        });

        // Run the overflow check on page load and on window resize
        window.onload = checkOverflow;
        window.onresize = checkOverflow;

    </script>

    <script>
        const toggleBtn = document.getElementById('toggleNavbar');
        const leftNavbar = document.getElementById('leftNavbar');
        
        toggleBtn.addEventListener('click', function() {
            leftNavbar.classList.toggle('active');
        });
    </script>

    <script>
        function loadLectureName(lectureId) {            
            $.ajax({
                url: '/Home/loadLectureName', // Change this to your action URL
                type: 'GET',
                data: { id: lectureId },
                success: function (response) {
                    $('#lecture-name').html(response).fadeIn('slow');
                },
                error: function (xhr, status, error) {
                    console.error(error);
                }
            });
        }
    </script>

    <script>
        function loadLecture(lectureId) {
            $.ajax({                
                url: '/Home/loadLecture', // Change this to your action URL
                type: 'GET',
                data: { id: lectureId },
                success: function (response) {
                    $('#content-section').html(response).fadeIn('slow');
                },
                error: function (xhr, status, error) {
                    console.error(error);
                }
            });
        }
    </script>

    <script>
        let tutorialId = null; // Variable to store the tutorial ID

        // Use event delegation to handle dynamically added elements
        $(document).on('click', '.add-lecture-icon', function () {
            tutorialId = $(this).data('tutorial-id'); // Store the tutorial ID
        });

        $('#addLectureButton').on('click', function () {
            if (tutorialId) {
                // Create a new FormData object
                var formData = new FormData();

                // Append the form data
                formData.append('title', $('#title').val());
                formData.append('content', $('#content').val());
                formData.append('topicId', tutorialId); // Tutorial ID

                // Send an AJAX request to upload the tutorial
                $.ajax({
                    url: '@Url.Action("UploadLecture", "Admin")', // URL to send the request to
                    type: 'POST',
                    data: formData,
                    processData: false, // Prevent jQuery from processing the data
                    contentType: false, // Prevent jQuery from setting the content type
                    success: function (result) {
                        // Update the off-canvas content with the new partial view
                        $('#leftNavDiv').html(result).fadeIn('slow');

                        // Close the modal after successful upload
                        $('#uploadLectureModel').modal('hide');

                        // Clear the form fields after modal is hidden
                        $('#title').val(''); 
                        $('#content').val('');
                    },
                    error: function (xhr, status, error) {
                        alert('An error occurred while uploading the lecture.'); // Show error if upload fails
                    }
                });
            } else {
                alert('No tutorial ID found.');
            }
        });

    </script>

    <script>
        let lectureIdToDelete = null; // Variable to store the Tutorial ID

        // Use event delegation to handle dynamically added elements
        $(document).on('click', '.delete-icon', function () {
            lectureIdToDelete = $(this).data('lecture-id'); 
            topicId = $(this).data('topic-id'); 
        });

        // When the Delete button in the modal is clicked, send the delete request
        $('#confirmDeleteButton').on('click', function () {
            if (lectureIdToDelete) {
                // Send an AJAX request to delete the lecture
                $.ajax({
                    url: '@Url.Action("DeleteLecture", "Admin")', // URL to send the request to
                    type: 'POST', // Use POST for delete requests
                    data: {
                        id: lectureIdToDelete,  // Pass the lecture ID to the server
                        topicid: topicId
                    },
                    success: function (result) {
                        // Update the off-canvas content with the new partial view
                        $('#leftNavDiv').html(result).fadeIn('slow');

                      var myhtml = '';
                        $('#content-section').html(myhtml).fadeIn('slow');

                        // Close the modal after successful tutorial deletion
                        $('#confirmDeleteModal').modal('hide'); // Close the modal
                    },
                    error: function (xhr, status, error) {
                        alert('An error occurred while deleting the lecture.'); // Show error if delete fails
                    }
                });
            }
        });

    </script>

    <script>
        // Function to set the active link
        function setActive(selectedLink) {
            // Remove the 'active' class from all links
            var links = document.querySelectorAll('.lecture-link');
            links.forEach(function (link) {
                link.classList.remove('active');
            });

            // Add the 'active' class to the clicked link
            selectedLink.classList.add('active');
        }
    </script>


    <partial name="_ValidationScriptsPartial" />;
</body>
</html>